apiVersion: v1
kind: Namespace
metadata:
  name: image-import
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: os-image-import-script
  namespace: image-import
data:
  import-script.sh: |
    #!/bin/sh
    IMAGES_DIR_NEW=/demo/data/new
    IMAGES_DIR_IMPORTED=/demo/data/imported
    STORAGE_CLASS=vm-storageclass
    DV_SIZE=20Gi
    PROJECT_NAME=image-import
    echo "List the content of new images"
    ls ${IMAGES_DIR_NEW} > /tmp/images_list
    LINECOUNT=`wc -l /tmp/images_list | awk '{print $1}'`
    if [ $LINECOUNT -gt 0 ]; then
        cat /tmp/images_list
        oc project ${PROJECT_NAME}
        for i in $(cat /tmp/images_list) ; do lower=$(echo $i | tr '[:upper:]' '[:lower:]') ; virtctl image-upload dv ${lower%.*}-dv --size=${DV_SIZE} --storage-class=${STORAGE_CLASS} --image-path=${IMAGES_DIR_NEW}/$i --force-bind --insecure; done
        oc get dv -n ${PROJECT_NAME}
        mkdir -p /tmp/image-datasources
        for i in $(cat /tmp/images_list)
          do lower=$(echo $i | tr '[:upper:]' '[:lower:]')
        cat << EOF >> /tmp/image-datasources/ds_${lower%.*}.yaml
        apiVersion: cdi.kubevirt.io/v1beta1
        kind: DataSource
        metadata:
          annotation:
            description: ${lower%.*}-ros-sda-template
          name: ${lower%.*}-vm
          namespace: ${PROJECT_NAME}
          labels:
            current-release: yes
            instancetype.kubevirt.io/default-preference: rhel-8
            os-type: ${lower%.*}-vm
        spec:
          source:
            pvc:
              name: ${lower%.*}-dv
              namespace: ${PROJECT_NAME}
    EOF
        done
        oc create -f /tmp/image-datasources/
        mv ${IMAGES_DIR_NEW}/* ${IMAGES_DIR_IMPORTED}/
    else
        echo "No new images found, nothing to do!"
    fi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: image-import-sa
  namespace: image-import
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: image-import-admin
  namespace: image-import
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: admin
subjects:
- kind: ServiceAccount
  name: image-import-sa
  namespace: image-import
---
kind: CronJob
apiVersion: batch/v1
metadata:
  name: os-image-import
  namespace: image-import
spec:
  schedule: '@weekly'
  concurrencyPolicy: Allow
  suspend: false
  jobTemplate:
    spec:
      template:
        spec:
          volumes:
          - name: script
            configMap:
              name: os-image-import-script
          - name: nfs-data
            persistentVolumeClaim:
              claimName: nfs-pvc
          serviceAccountName: image-import-sa
          containers:
            - name: os-image-import
              image: 'registry.redhat.io/web-terminal/web-terminal-tooling-rhel9@sha256:56d0e658242cc58de43792b658cad00978bb26acca8f8c52f9a6efaae0319306'
              volumeMounts:
                - name: script
                  mountPath: /usr/os-image-import
                - name: nfs-data
                  mountPath: /demo/data
              command:
              - /bin/sh
              - /usr/os-image-import/import-script.sh
              imagePullPolicy: IfNotPresent
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}
          schedulerName: default-scheduler